from selenium import selenium
import unittest, time, re

class creation_composant_version(unittest.TestCase):
    def setUp(self):
        self.verificationErrors = []
        self.selenium = selenium("localhost", 4444, "*chrome", "http://localhost:8000/")
        self.selenium.start()
    
    def test_creation_composant_version(self):
        sel = self.selenium
        sel.open("/admin/")
        sel.type("id=id_password", "")
        sel.type("id=id_username", "")
        sel.type("id=id_password", "admin")
        sel.type("id=id_username", "admin")
        sel.click("css=input[type=\"submit\"]")
        sel.wait_for_page_to_load("3000")
        sel.click("xpath=(//a[contains(text(),'Composant versions')])[2]")
        sel.wait_for_page_to_load("3000")
        sel.click("css=a.addlink")
        sel.wait_for_page_to_load("3000")
        sel.click("css=img[alt=\"Add Another\"]")
        time.sleep(3)
        sel.select_window("name=id_composant")
        sel.type("id=id_titre", "Test Composant")
        sel.select("id=id_type_composant", "label=Open Source")
        sel.click("name=_save")
        sel.wait_for_page_to_load("3000")
        sel.select_window("null")
        sel.click("css=#add_id_version > img[alt=\"Add Another\"]")
        sel.wait_for_pop_up("id_version", "3000")
        sel.select_window("name=id_version")
        sel.type("id=id_label", "0.1")
        sel.type("id=id_description", "test")
        sel.click("name=_save")
        sel.wait_for_page_to_load("3000")
        sel.select_window("null")
        sel.select("id=id_nature", "label=dll")
        sel.select("id=id_licence", "label=GPL v2")
        sel.type("id=id_cout", "100")
        sel.click("name=_save")
        sel.wait_for_page_to_load("3000")
        sel.click("name=_selected_action")
        sel.select("name=action", "label=Delete selected composant versions")
        sel.click("name=index")
        sel.wait_for_page_to_load("3000")
        sel.click("css=input[type=\"submit\"]")
        sel.wait_for_page_to_load("3000")
        sel.click("xpath=(//a[contains(text(),'Gestion')])[2]")
        sel.wait_for_page_to_load("3000")
        sel.click("xpath=(//a[contains(text(),'Version logiciels')])[2]")
        sel.wait_for_page_to_load("3000")
        sel.click("name=_selected_action")
        sel.select("name=action", "label=Delete selected version logiciels")
        sel.click("name=index")
        sel.wait_for_page_to_load("3000")
        sel.click("css=input[type=\"submit\"]")
        sel.wait_for_page_to_load("3000")
        sel.click("xpath=(//a[contains(text(),'Gestion')])[2]")
        sel.wait_for_page_to_load("3000")
        sel.click("xpath=(//a[contains(text(),'Produits')])[2]")
        sel.wait_for_page_to_load("3000")
        sel.click("xpath=(//a[contains(text(),'Gestion')])[2]")
        sel.wait_for_page_to_load("3000")
        sel.click("xpath=(//a[contains(text(),'Composants')])[2]")
        sel.wait_for_page_to_load("3000")
        sel.click("name=_selected_action")
        sel.select("name=action", "label=Delete selected composants")
        sel.click("name=index")
        sel.wait_for_page_to_load("3000")
        sel.click("css=input[type=\"submit\"]")
        sel.wait_for_page_to_load("3000")
        sel.click("xpath=(//a[contains(text(),'Gestion')])[2]")
        sel.wait_for_page_to_load("3000")
        sel.click("link=Log out")
        sel.wait_for_page_to_load("3000")
    
    def tearDown(self):
        self.selenium.stop()
        self.assertEqual([], self.verificationErrors)

if __name__ == "__main__":
    unittest.main()
